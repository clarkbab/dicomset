#! /usr/bin/env python
import argparse
import logging
import os
import sys

root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(root_dir)

from mymi import cache
from mymi import utils
from mymi.preprocessing import ParotidLeft3DPreprocessor
from mymi.transforms import CropOrPad, Resample

# Parse args.
parser = argparse.ArgumentParser(description='Preprocess DICOM dataset for ML model')
parser.add_argument('-c', '--cache-path', action='store', help='path to cache root')
parser.add_argument('-l', '--log-level', action='store', default='info', help='sets the log level')
parser.add_argument('-n', '--no-cache', action='store_true', default=False, help='disables the cache')
parser.add_argument('-nr', '--no-cache-read', action='store_true', default=False, help='disables cache read')
parser.add_argument('-nw', '--no-cache-write', action='store_true', default=False, help='disables cache write')
parser.add_argument('-np', '--num-pats', action='store', default='all', help='number of patients to process')
parser.add_argument('-p', '--path', action='store', help='path to store processed data')
parser.add_argument('-t', '--transforms-path', action='store', help='path to transforms')
args = parser.parse_args()

# Create logger.
log_level = getattr(logging, args.log_level.upper(), None)
utils.configure_logging(log_level)

# Set cache configuration.
cache_config = {
   'path': args.cache_path,
   'enabled': not args.no_cache,
   'enabled-read': not args.no_cache_read,
   'enabled-write': not args.no_cache_write
}
cache.config(**cache_config)

# Convert num pats to int.
num_pats = args.num_pats if args.num_pats == 'all' else int(args.num_pats)

# Create transforms.
fill = -1000
spacing = (1.0, 1.0, 3.0)
resolution = (512, 512, 212)
transforms = [
    Resample(spacing=spacing),
    CropOrPad(resolution, fill=fill)
]

# Perform extraction.
dp = ParotidLeft3DPreprocessor()
dp.extract(num_pats=num_pats, transforms=transforms)
