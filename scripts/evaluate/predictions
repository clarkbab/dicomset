#! /usr/bin/env python3
import argparse
import os
import pandas as pd
import sys
import torch

root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(root_dir)

from mymi import dataset
from mymi.dataset import DicomDataset
from mymi import logging
from mymi.metrics import batch_dice
from mymi import utils

# Parse args.
parser = argparse.ArgumentParser(description='Compare contours to ground truth')
parser.add_argument('-c', '--clear-cache', action='store_true', default=False, help='clear the cache')
parser.add_argument('-g', '--ground-truth', action='store', help='the ground truth dataset', required=True)
parser.add_argument('-l', '--log-level', action='store', default='info', help='sets the log level')
parser.add_argument('-p', '--predictions', action='store', help='the predictions', required=True)
args = parser.parse_args()

# Create logger.
logging.config(args.log_level)

# Create ground truth dataset.
gt_ds = DicomDataset(args.ground_truth)

# Load evaluation patients.
pred_ds = DicomDataset(args.predictions, ct_from=args.ground_truth)
pats = pred_ds.list_patients()

# Load up label names.
gt_labels = gt_ds.label_summary(clear_cache=args.clear_cache).label.unique()
pred_labels = pred_ds.label_summary(clear_cache=args.clear_cache).label.unique()
print(gt_labels)
print(pred_labels)

# TODO: Handle different contours names, e.g. Parotid-Left vs Parotid_L.
# Map from database to our local names.

# Create dataframe.
cols = {
    'pat-id': str,

}

# Add metrics for patients.
dice_scores = []
for pat in pats:
    print(pat)
    # Load ground truth.
    _, gt_data = gt_ds.patient(pat).label_data(clear_cache=args.clear_cache, labels=gt_labels)[0]

    # Load prediction data.
    _, pred_data = pred_ds.patient(pat).label_data(clear_cache=args.clear_cache, labels=pred_labels)[0]

    # Calculate DSC.
    gt_data = torch.Tensor(gt_data).unsqueeze(0)
    pred_data = torch.Tensor(pred_data).unsqueeze(0)

    dsc = batch_dice(gt_data, pred_data)  

    print(dsc)

