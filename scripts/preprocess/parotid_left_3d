#! /usr/bin/env python
import argparse
import logging
import os
import sys

root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(root_dir)

from mymi import cache
from mymi import utils
from mymi.preprocessing import ParotidLeft3DPreprocessor
from torchio.transforms import Compose, CropOrPad, Resample

# Parse args.
parser = argparse.ArgumentParser(description='Preprocess DICOM dataset for ML model')
parser.add_argument('-c', '--clear-cache', action='store_true', default=False, help='clear the cache')
parser.add_argument('-l', '--log-level', action='store', default='info', help='sets the log level')
parser.add_argument('-n', '--no-cache', action='store_true', default=False, help='disables the cache')
parser.add_argument('-nr', '--no-cache-read', action='store_true', default=False, help='disables cache read')
parser.add_argument('-nw', '--no-cache-write', action='store_true', default=False, help='disables cache write')
parser.add_argument('-np', '--num-pats', action='store', default='all', help='number of patients to process')
parser.add_argument('-p', '--path', action='store', help='path to store processed data')
parser.add_argument('-t', '--transforms-path', action='store', help='path to transforms')
args = parser.parse_args()

# Create logger.
log_level = getattr(logging, args.log_level.upper(), None)
utils.configure_logging(log_level)

# Convert num pats to int.
num_pats = args.num_pats if args.num_pats == 'all' else int(args.num_pats)

# Create transforms.
fill = 'minimum'
spacing = (1.0, 1.0, 3.0)
resolution = (512, 512, 212)
transforms = [
    Resample(spacing),
    CropOrPad(resolution, padding_mode=fill)
]
transform = Compose(transforms)

# Perform extraction.
preprocessor = ParotidLeft3DPreprocessor()
preprocessor(clear_cache=args.clear_cache, num_pats=num_pats, transform=transform)
