#! /usr/bin/env python
from distutils.dir_util import copy_tree
import nibabel as nib
from nibabel.nifti1 import Nifti1Image
import numpy as np
import os
import shutil
import sys
from tqdm import tqdm

root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.append(root_dir)

from mymi.dataset.raw import recreate

DATASET_PATH = os.path.join(os.sep, 'data', 'projects', 'punim1413', 'mymi', 'datasets', 'raw', 'PMCC-HN-TRAIN')
FILENAME_NUM_DIGITS = 5

# Create new dataset.
ds_name = 'PMCC-HN-TRAIN-FLIP'
ds = recreate(ds_name, 'nifti')

# Copy CT data.
old_ct_path = os.path.join(DATASET_PATH, 'ct')
ct_path = os.path.join(ds.path, 'ct')
copy_tree(old_ct_path, ct_path)

# Create map from old IDs to flipped IDs.
cts = list(sorted(os.listdir(ct_path)))
old_ids = [int(s.split('.')[0]) for s in cts]
start_index = old_ids[-1] + 1
new_ids = list(range(start_index, start_index + len(old_ids)))

# Get flippable regions.
regions = list(sorted(os.listdir(DATASET_PATH)))
regions = list(filter(lambda r: r.endswith('_L') or r.endswith('_R'), regions))

# Copy region data.
for region in regions:
    old_region_path = os.path.join(DATASET_PATH, region)
    region_path = os.path.join(ds.path, region)
    copy_tree(old_region_path, region_path)

# Create map from old regions to flipped regions.
def flip_region(region):
    if region.endswith('_L'):
        return region.replace('_L', '_R')
    else:
        return region.replace('_R', '_L')

flipped_regions = [flip_region(r) for r in regions]

# For each patient, flip left/right regions to double data.
for old_id, new_id in tqdm(zip(old_ids, new_ids)):
    # Flip CT data.
    filename = f"{old_id:0{FILENAME_NUM_DIGITS}}.nii.gz"
    filepath = os.path.join(ds.path, 'ct', filename)
    img = nib.load(filepath)
    data = img.get_data()
    affine = img.affine
    flipped_data = np.flip(data, axis=0)

    # Save flipped image.
    flipped_img = Nifti1Image(flipped_data, affine)
    flipped_filename = f"{new_id:0{FILENAME_NUM_DIGITS}}.nii.gz"
    flipped_filepath = os.path.join(ds.path, 'ct', flipped_filename)
    nib.save(flipped_img, flipped_filepath)

    for region, flipped_region in zip(regions, flipped_regions):
        filepath = os.path.join(ds.path, region, filename)
        if os.path.exists(filepath):
            # Flip region.
            img = nib.load(filepath)
            data = img.get_data()
            affine = img.affine
            flipped_data = np.flip(data, axis=0)

            # Save flipped image.
            flipped_img = Nifti1Image(flipped_data, affine)
            flipped_filepath = os.path.join(ds.path, flipped_region, flipped_filename)
            nib.save(flipped_img, flipped_filepath)
            
