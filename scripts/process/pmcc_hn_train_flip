#! /usr/bin/env python
import numpy as np
import os
import shutil
import sys
from tqdm import tqdm

root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(root_dir)

from mymi import dataset
from mymi.dataset.processed import recreate
from mymi import logging

FILENAME_NUM_DIGITS = 5

# Load old dataset.
old_ds_name = 'PMCC-HN-TRAIN-SEG'
old_ds = dataset.get(old_ds_name)

# Create new dataset.
ds_name = 'PMCC-HN-TRAIN-FLIP-SEG'
ds = recreate(ds_name)

# Copy params.
filename = 'params.csv'
filepath = os.path.join(old_ds.path, filename)
new_filepath = os.path.join(new_ds.path, filename)
shutil.copyfile(filepath, new_filepath)

partitions = old_ds.list_partitions()
for par in partitions:
    # Get flippable regions.
    old_partition = old_ds.partition(par)
    regions = old_partition.list_regions()
    regions = list(filter(lambda r: r.endswith('_L') or r.endswith('_R'), regions))

    indices = old_partition.list_samples()
    new_partition = ds.create_partition(par)
    logging.info(f"Copying normal data from '{par}' partition...")
    for index in tqdm(indices):
        # Copy input data.
        sample = old_partition.sample(index)
        data = sample.input()
        pat_id = sample.patient_id
        new_index = new_partition.create_input(pat_id, data)

        # Copy region data.
        sam_regions = sample.list_regions()
        sam_regions = np.intersect1d(sam_regions, regions)
        labels = sample.label(regions=sam_regions)
        for r, d in labels.items():
            new_partition.create_label(new_index, r, d)  

    # Create map from old regions to flipped regions.
    def flip_region(region):
        if region.endswith('_L'):
            return region.replace('_L', '_R')
        else:
            return region.replace('_R', '_L')
    flipped_regions = [flip_region(r) for r in regions]
    region_map = dict(zip(regions, flipped_regions))

    logging.info(f"Creating flipped data for '{par}' partition...")
    for index in tqdm(indices):
        # Add flipped input data.
        sample = old_partition.sample(index)
        data = sample.input()
        pat_id = sample.patient_id
        new_pat_id = f"{pat_id}-flip"
        flipped_data = np.flip(data, axis=0)
        new_index = new_partition.create_input(new_pat_id, flipped_data)

        # Copy region data.
        sam_regions = sample.list_regions()
        sam_regions = np.intersect1d(sam_regions, regions)
        labels = sample.label(regions=sam_regions)
        for r, d in labels.items():
            flipped_region = region_map[r]
            flipped_data = np.flip(d, axis=0)
            new_partition.create_label(new_index, flipped_region, flipped_data)  
